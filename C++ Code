#include<iostream>
#include<string>
#include<algorithm>
#include<bitset>
#include<cstdint>
#include<math.h>
#include<sstream>
#include<bitset>
#include<iomanip>
#define _CRT_SECURE_NO_WARNINGS
using namespace std;

const int n = 64;

int EpMap[48] = { 32,1,2,3,4,5,
4,5,6,7,8,9,
8,9,10,11,12,13,
12,13,14,15,16,17,
16,17,18,19,20,21,
20,21,22,23,24,25,
24,25,26,27,28,29,
28,29,30,31,32,1 };


int IpMap[64] = { 58,50,42,34,26,18,10,2,
60,52,44,36,28,20,12,4,
62,54,46,38,30,22,14,6,
64,56,48,40,32,24,16,8,
57,49,41,33,25,17,9,01,
59,51,43,35,27,19,11,3,
61,53,45,37,29,21,13,5,
63,55,47,39,31,23,15,7 };


int FpMap[64] = { 40,8,48,16,56,24,64,32,
39,7,47,15,55,23,63,31,
38,6,46,14,54,22,62,30,
37,5,45,13,53,21,61,29,
36,4,44,12,52,20,60,28,
35,3,43,11,51,19,59,27,
34,2,42,10,50,18,58,26,
33,01,41,9,49,17,57,25 };

char* unperBinary = new char[64];
char* perBinary = new char[64];
string sPerHex = "";

//Functions Declaration
const char* hex_char_to_bin(char c);

string hex_str_to_bin_str(const std::string& hex);

string plainText_to_hex(const string& input, string& output);

string hex_to_plainText(const string& input, string& output);

string hex_to_binary(string hexStr, string& binaryStr);

void permutaion(int IpMap[], char unperBinary[], char perBinary[]);

string bin_to_hex(string sBinary, string& rest);

int bin_to_dec(int binaryNum);

string dec_to_bin(int decimalNum);

void expantion_Permutation(int EpMap[], char expBin[], char rightHalf[]);

void split_to(string& sPerHex, char leftHalf[], char rightHalf[]);

void shiftLeft(char myarray[], int shiftBy);

int MapSBox(int num, int row, int column);

void swapper(char leftHalf[], char rightHalf[], char mixer[]);

void exchange_swap(char leftHalf[], char rightHalf[]);

void des_function(char leftHalf[], char rightHalf[], string perKeyShift[]);

void des_DecFun(char rightHalf[], char leftHalf[], string perKeyShift[]);

void initial_Permutation(string hexText);

int main()
{
	cout << "\t\t\t" << "- C++ Implementation of DES Algorithm -\n\n\n";

	string plainText, IpStr, binText, toEncrypt, hexPtext;
	cout << "Enter Text (Picking first 8-char, 64-bits) : ";
	getline(cin, plainText);

	toEncrypt = plainText.substr(0, 8);   //Picking first 8-char 64-bits 
	plainText_to_hex(toEncrypt, hexPtext);
	


	//................................................Create 16 subkeys.....................................................

	string skeyGet, skeyText, skeyHex, skeyBin;
	cout << "Enter 8-char key(64-bits) : ";
	getline(cin, skeyGet);			 
	//skeyHex = "133457799BBCDFF1";    // sample key
	//skeyHex = "AABB09182736CCDD";      //slide key

	skeyText = skeyGet.substr(0, 8);   //Picking first 8-char 64-bits 

	plainText_to_hex(skeyText, skeyHex);
									   //cout << "\nkeyHex : " << skeyHex << endl;
	cout << "\n64-bit of PlainText : " << toEncrypt << endl;
	cout << "HexPText : " << hexPtext << "\n\n";
	initial_Permutation(hexPtext);

	hex_to_binary(skeyHex, skeyBin);	//From the original 64-bit key

	
	int keyMap[56] = { 57  , 49 ,   41  , 33  ,  25 ,   17  ,  9
		,		1   ,58 ,   50,   42 ,   34 ,   26   ,18,
		10  ,  2 ,   59 ,  51   , 43 ,   35   ,27,
		19  , 11 ,    3   ,60  ,  52 ,   44,   36
		,63,   55 ,   47  , 39   , 31  ,  23 ,  15
		,		7   ,62  ,  54  , 46 ,   38 ,   30 ,  22
		,14  ,  6 ,   61,   53  ,  45  ,  37,   29
		,		21  , 13 ,    5  , 28   , 20  ,  12  ,  4 };

	char* perKeyBin = new char[56];
	char* unPerKeyBin = new char[64];
	perKeyBin[56] = '\0';
	unPerKeyBin[64] = '\0';

	string sPerKeyBin;
	for (int i = 0; i < 56; i++)
	{
		sPerKeyBin.push_back(skeyBin.at(keyMap[i] - 1));
	}
	


	//spliting this key into left and right halves, C0 and D0, where each half has 28 bits.

	char* keyLh = new char[28];
	char* keyRh = new char[28];
	keyLh[28] = '\0';
	keyRh[28] = '\0';

	split_to(sPerKeyBin, keyLh, keyRh);



	//left shifts
	int row = 32, column = 28;
	int LsMap[16] = { 1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1 };
	string shifts[32];

	for (int i = 0, j = 0; i < row; i += 2, j++)
	{
		shiftLeft(keyLh, LsMap[j]);
		shifts[i] = keyLh;
	}
	for (int i = 1, j = 0; i < row; i += 2, j++)
	{
		shiftLeft(keyRh, LsMap[j]);
		shifts[i] = keyRh;
	}




	//Each pair has 56 bits, but Key-compression table only uses 48 of these.

	int KeyLrMap[48] = { 14  ,  17  , 11  ,  24  ,   1 ,   5
		,	3   , 28 ,  15 ,    6  ,  21  , 10
		,		23   , 19,   12  ,   4  ,  26,    8,
		16   ,  7   ,27  ,  20  ,  13  ,  2
		,41   , 52  , 31 ,   37,    47 ,  55
		,30  ,  40 ,  51  ,  45  ,  33  , 48
		,44  ,  49,   39  ,  56 ,   34 ,  53
		,46   , 42 ,  50 ,   36 ,   29 ,  32 };       //Key-compression table
	string cshifts[16], binShift[16], perKeyShift[16];

	char* chShifts = new char[56];
	chShifts[56] = '\0';

	for (int i = 0, j = 1, k = 0; i < 32; i += 2, j += 2, k++)
		cshifts[k] = shifts[i] + shifts[j];

	for (int j = 0; j < 16; j++)
	{
		for (int i = 0; i < 48; i++)
		{
			perKeyShift[j].push_back(cshifts[j].at(KeyLrMap[i] - 1));
		}
	}




	//..................................................split L, R.............................................................
	char* leftHalf = new char[8];
	char* rightHalf = new char[8];
	leftHalf[8] = '\0';
	rightHalf[8] = '\0';

	split_to(sPerHex, leftHalf, rightHalf);

	cout << "After Splitting : ";
	cout << "L0 = " << leftHalf;
	cout << "   R0 = " << rightHalf << endl;
	cout << endl;





	//...................................................Encryption..........................................................
	cout << "Round\tSplitting\t\tKeys\n";

	des_function(leftHalf, rightHalf, perKeyShift);







	//........................................................Exchange Swapper..............................................................

	exchange_swap(leftHalf, rightHalf);

	string cLeftHex(leftHalf, 8); //char array to string conversion
	string cRightHex(rightHalf, 8); //char array to string conversion

	string cipherHex = cLeftHex + cRightHex;      //concatenation of Left and Right half of HexText

	cout << "\nAfter Combination : " << cipherHex << endl;







	//...................................................Final Permutation.......................................................

	string fBinOfHex = "";
	hex_to_binary(cipherHex/*sPerHex*/, fBinOfHex);

	for (unsigned int i = 0; i <= fBinOfHex.length(); i++)
	{
		unperBinary[i] = fBinOfHex[i];   // string to char array
	}

	for (int i = 0; i < 64; i++)
	{
		perBinary[i] = '0';				// char array initialized by all-Zero
	}

	permutaion(FpMap, unperBinary, perBinary);

	cout << endl;
	string sfPerHex;
	string sfPerBinary(perBinary); //char array to string conversion
	bin_to_hex(sfPerBinary, sfPerHex);
	cout << "Cipher Text : " << sfPerHex << endl;


	int len = sfPerHex.length();
	string newString;

	for (int i = 0; i < len; i += 2)
	{
		string byte = sfPerHex.substr(i, 2);
		char chr = (char)(int)strtol(byte.c_str(), NULL, 16);				//Hexa values to plainText
		newString.push_back(chr);
	}

	cout << "Cipher PlainText : " << newString;















	//...................................................Decryption Started.....................................................



	//initial_Permutation(sfPerHex);

	string LeftHexd(leftHalf, 8);				//char array to string conversion
	string RightHexd(rightHalf, 8);

	cout << "\n\n\n\n\n\n\n\n-Decryption-\n\n";
	cout << "Cipher Text : " << sfPerHex << endl;

	initial_Permutation(sfPerHex);

	cout << "\n\nRound\tSplitting\t\tKeys\n";
	des_DecFun(rightHalf, leftHalf, perKeyShift);
	exchange_swap(leftHalf, rightHalf);

	string cLeftHexd(leftHalf, 8);				//char array to string conversion
	string cRightHexd(rightHalf, 8);

	string cipherHexd = cLeftHexd + cRightHexd;      //concatenation of Left and Right half of HexText

	cout << "\nAfter Combination : " << cipherHexd << endl;

	string dfBinOfHex = "";
	dfBinOfHex = hex_str_to_bin_str(cipherHexd);

	for (unsigned int i = 0; i <= dfBinOfHex.length(); i++)
	{
		unperBinary[i] = dfBinOfHex[i];   // string to char array
	}
	cout << endl;

	for (int i = 0; i < 64; i++)
	{
		perBinary[i] = '0';				// char array initialized by all-Zero
	}

	permutaion(FpMap, unperBinary, perBinary);

	cout << endl;
	string dsfPerHex;
	string dsfPerBinary(perBinary); //char array to string conversion
	bin_to_hex(dsfPerBinary, dsfPerHex);
	cout << "Decrypted Text :" << dsfPerHex;


	int dlen = dsfPerHex.length();
	string dnewString;

	for (int i = 0; i < dlen; i += 2)
	{
		string dbyte = dsfPerHex.substr(i, 2);
		char dchr = (char)(int)strtol(dbyte.c_str(), NULL, 16);				//Hexa values to plainText
		dnewString.push_back(dchr);
	}

	cout << "\nDecrypted PlainText : " << dnewString<<endl;
}




const char* hex_char_to_bin(char c)
{
	switch (toupper(c))
	{
	case '0': return "0000";
	case '1': return "0001";
	case '2': return "0010";
	case '3': return "0011";
	case '4': return "0100";
	case '5': return "0101";
	case '6': return "0110";
	case '7': return "0111";
	case '8': return "1000";
	case '9': return "1001";
	case 'A': return "1010";
	case 'B': return "1011";
	case 'C': return "1100";
	case 'D': return "1101";
	case 'E': return "1110";
	case 'F': return "1111";
	}
	return 0;
}
string hex_str_to_bin_str(const std::string& hex)
{
	std::string bin;
	for (unsigned i = 0; i != hex.length(); ++i)
		bin += hex_char_to_bin(hex[i]);
	return bin;
}

string plainText_to_hex(const string& input, string& output)
{
	static const char* const lut = "0123456789ABCDEF";
	size_t len = input.length();

	output.reserve(2 * len);
	for (size_t i = 0; i < len; ++i)
	{
		const unsigned char c = input[i];
		output.push_back(lut[c >> 4]);
		output.push_back(lut[c & 15]);
	}
	return output;
}

string hex_to_plainText(const string& input, string& output)
{
	static const char* const lut = "0123456789ABCDEF";
	size_t len = input.length();
	if (len & 1) throw std::invalid_argument("odd length");

	output.reserve(len / 2);
	for (size_t i = 0; i < len; i += 1)
	{
		char a = input[i];
		const char* p = std::lower_bound(lut, lut + 16, a);
		if (*p != a) throw std::invalid_argument("not a hex digit");
	}
	return output;
}
string hex_to_binary(string hexStr, string& binaryStr)
{
	for (unsigned int i = 0; i < hexStr.length(); ++i)
	{
		switch (hexStr[i])
		{
		case '0': binaryStr.append("0000"); break;
		case '1': binaryStr.append("0001"); break;
		case '2': binaryStr.append("0010"); break;
		case '3': binaryStr.append("0011"); break;
		case '4': binaryStr.append("0100"); break;
		case '5': binaryStr.append("0101"); break;
		case '6': binaryStr.append("0110"); break;
		case '7': binaryStr.append("0111"); break;
		case '8': binaryStr.append("1000"); break;
		case '9': binaryStr.append("1001"); break;
		case 'A': binaryStr.append("1010"); break;
		case 'B': binaryStr.append("1011"); break;
		case 'C': binaryStr.append("1100"); break;
		case 'D': binaryStr.append("1101"); break;
		case 'E': binaryStr.append("1110"); break;
		case 'F': binaryStr.append("1111"); break;
		}
	}
	return binaryStr;
}

void permutaion(int IpMap[], char unperBinary[], char perBinary[])
{
	int  count = 0, count2 = 0, noBitIns = 0, IpBitIns = 0;
	for (int i = 0; i < 64; i++)
	{
		if (unperBinary[i] == '1')
		{
			noBitIns = i + 1;
			count += 1;
			for (int j = 0; j < 64; j++)
			{
				if (IpMap[j] == noBitIns)
				{
					IpBitIns = j + 1;
					perBinary[IpBitIns - 1] = '1';
					count2 += 1;
				}
			}
		}
	}
	/*cout << " Permutation : ";
	for (int i = 0; i < 64; i++)
	cout << perBinary[i];
	cout << endl;*/
}

string bin_to_hex(string sBinary, string& rest)
{
	string tmp, chr = "";
	int len = sBinary.length() / 4;
	chr = chr.substr(0, len);
	sBinary = chr + sBinary;
	for (unsigned int i = 0; i<sBinary.length(); i += 4)
	{
		tmp = sBinary.substr(i, 4);
		if (!tmp.compare("0000"))
		{
			rest = rest + "0";
		}
		else if (!tmp.compare("0001"))
		{
			rest = rest + "1";
		}
		else if (!tmp.compare("0010"))
		{
			rest = rest + "2";
		}
		else if (!tmp.compare("0011"))
		{
			rest = rest + "3";
		}
		else if (!tmp.compare("0100"))
		{
			rest = rest + "4";
		}
		else if (!tmp.compare("0101"))
		{
			rest = rest + "5";
		}
		else if (!tmp.compare("0110"))
		{
			rest = rest + "6";
		}
		else if (!tmp.compare("0111"))
		{
			rest = rest + "7";
		}
		else if (!tmp.compare("1000"))
		{
			rest = rest + "8";
		}
		else if (!tmp.compare("1001"))
		{
			rest = rest + "9";
		}
		else if (!tmp.compare("1010"))
		{
			rest = rest + "A";
		}
		else if (!tmp.compare("1011"))
		{
			rest = rest + "B";
		}
		else if (!tmp.compare("1100"))
		{
			rest = rest + "C";
		}
		else if (!tmp.compare("1101"))
		{
			rest = rest + "D";
		}
		else if (!tmp.compare("1110"))
		{
			rest = rest + "E";
		}
		else if (!tmp.compare("1111"))
		{
			rest = rest + "F";
		}
		else
		{
			continue;
		}
	}
	return rest;
}

int bin_to_dec(int binaryNum)
{
	int bin, dec = 0, rem, base = 1;

	bin = binaryNum;
	while (binaryNum > 0)
	{
		rem = binaryNum % 10;
		dec = dec + rem * base;
		base = base * 2;
		binaryNum = binaryNum / 10;
	}
	return dec;
}
string dec_to_bin(int decimalNum)
{
	string bin;
	char holder = ' ';

	while (decimalNum != 0)
	{
		holder = decimalNum % 2 + '0';
		bin = holder + bin;
		decimalNum /= 2;
	}
	return bin;
}
void expantion_Permutation(int EpMap[], char expBin[], char rightHalf[])
{
	for (int i = 0; i < 48; i++)
	{
		expBin[i] = rightHalf[EpMap[i] - 1];
	}
}
void split_to(string& sPerHex, char leftHalf[], char rightHalf[])
{
	int length = 0, mid = 0;

	length = sPerHex.length();

	mid = length / 2;

	/* Copy left half of inputString to leftHalf */
	for (int i = 0; i < mid; i++) {
		leftHalf[i] = sPerHex[i];
	}

	/* Copy right half of inputString to rightHalf  */
	for (int i = mid, k = 0; i <= length; i++, k++) {
		rightHalf[k] = sPerHex[i];
	}
}
void shiftLeft(char myarray[], int shiftBy)
{
	int size = 28;
	if (shiftBy > size) {
		shiftBy = shiftBy - size;
	}

	if (size == 1) {
		//do nothing
	}
	else {
		char temp;
		//for loop to print the array with indexes moved up (to the left) <-- by 2
		for (int i = 0; i < size - shiftBy; i++)
		{
			//EXAMPLE shift by 3  for a c-string of 5
			temp = myarray[i];		//temp = myarray[0]
			myarray[i] = myarray[i + shiftBy];		//myarray[0] == myarray[2]
			myarray[i + shiftBy] = temp;		//myarray[2] = temp(value previously at index i)
		}

	}
}
int MapSBox(int num, int row, int column) {

	int S[512] =
	{ 14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
		0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
		4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
		15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,
		15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
		3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
		0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
		13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,
		10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
		13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
		13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
		1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,
		7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
		13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
		10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
		3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,
		2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
		14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
		4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
		11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,
		12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
		10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
		9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
		4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,
		4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
		13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
		1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
		6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,
		13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
		1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
		7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
		2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11 };
	return (S[(num) * 64 + row * 16 + column]);
}
void swapper(char leftHalf[], char rightHalf[], char mixer[])
{
	char* leftHalfRound = new char[8];
	leftHalfRound[8] = '\0';
	for (int i = 0; i < 8; i++)
	{
		leftHalfRound[i] = rightHalf[i];                    // Putting rightHalf to nextRound-Lefthalf
	}

	string sMixer(mixer, 32);								//char array to string conversion
	string sHexRightHalf;
	bin_to_hex(sMixer, sHexRightHalf);
	for (int i = 0; i < 8; i++)
	{
		rightHalf[i] = sHexRightHalf.at(i);                //putting function output to nextRound-rightHalf
	}
	for (int i = 0; i < 8; i++)
	{
		leftHalf[i] = leftHalfRound[i];
	}

}

void exchange_swap(char leftHalf[], char rightHalf[])
{
	char *temp = new char[8];
	temp[8] = '\0';

	for (int i = 0; i < 8; i++)
	{
		temp[i] = leftHalf[i];
	}

	for (int i = 0; i < 8; i++)
	{
		leftHalf[i] = rightHalf[i];
	}

	for (int i = 0; i < 8; i++)
	{
		rightHalf[i] = temp[i];
	}
	/*
	cout << endl << "RightHalf :" << rightHalf;
	cout << "\n";
	cout << "\nLeftHalf :" << leftHalf << endl;*/

}

void des_function(char leftHalf[], char rightHalf[], string perKeyShift[])
{
	for (int m = 0; m < 16; m++)
	{
		//................................................Expanding RI−1 to 48 bits...............................................


		//Expansion permutation

		string binRightHalf = "";
		string sRightHalf(rightHalf, 8);     //char to string
		hex_to_binary(sRightHalf, binRightHalf);
		char* expBinRh = new char[48];
		char* unperRightHalf = new char[32];
		expBinRh[48] = '\0';
		unperRightHalf[48] = '\0';

		for (unsigned int i = 0; i <= binRightHalf.length(); i++)
		{
			unperRightHalf[i] = binRightHalf[i];    // string to char array 
		}

		for (int i = 0; i < 48; i++)
		{
			expBinRh[i] = '0';			        	// char array initialized by all-Zero
		}

		expantion_Permutation(EpMap, expBinRh, unperRightHalf);
		//cout << endl;
		//cout << "ExpBin :" << expBinRh << endl;    //Expanded binary 48-bit
		//cout << "\n\n";


		//..................................XOR the output E(Rn-1) with the key Kn..............................................


		//	cout << "ExpBinRh :" << expBinRh << endl;    //Expanded binary 48-bit
		string sExpBinRh(expBinRh, 48); //char array to string conversion
		char *xorBin = new char[48];

		for (int j = 0; j < 16; j++)
		{
			for (int i = 0; i < 48; i++)
			{
				xorBin[i] = ((sExpBinRh[i] - '0') ^ (perKeyShift[m].at(i) - '0')) + '0';
			}
		}
		/*cout << "\nXor :";
		for (int i = 0; i < 48; i++)
		{
		cout << xorBin[i];
		}
		cout << "\n";*/




		//..................................................S-boxes..............................................................

		string blockXor, rowBit, colBit, perSbox;
		int loopIndex_Count = 0, colId, rowId;
		int value, mapVal;

		for (int i = 0; i < 8; i++)
		{
			blockXor.clear();
			for (int j = 0; j < 6; j++)
			{
				blockXor.push_back(xorBin[j + loopIndex_Count]);
			}
			loopIndex_Count += 6;
			rowBit = blockXor.at(0);
			rowBit.push_back(blockXor.at(5));

			value = atoi(rowBit.c_str());
			rowId = bin_to_dec(value);

			colBit = blockXor.substr(1, 4);
			value = atoi(colBit.c_str());
			colId = bin_to_dec(value);

			mapVal = MapSBox(i, rowId, colId);
			bitset<4> bin_x(mapVal);

			stringstream convert;		// stringstream used for the conversion
			convert << bin_x;			//add the value of Number to the characters in the stream

			string sMapVal;
			sMapVal = convert.str();

			for (unsigned int k = 0; k < sMapVal.length(); k++)
				perSbox.push_back(sMapVal.at(k));
		}
		/*cout << "perSbox : " << perSbox << "\n";
		cout << "perSbox : " << perSbox.length() << "\n";*/


		//.........................................permutation P of the S - box output..............................................

		int MapPbox[32] = {
			16  , 7 , 20 , 21,
			29  ,12 , 28 , 17,
			1 , 15 , 23 , 26,
			5 , 18 , 31 , 10,
			2 ,  8,  24,  14,
			32,  27,   3 ,  9,
			19 , 13 , 30 ,  6,
			22 , 11 ,  4,  25
		};

		string sboxPer;
		for (int i = 0; i < 32; i++)
		{
			sboxPer.push_back(perSbox.at(MapPbox[i] - 1));
		}
		//cout << "sboxPer : " << sboxPer << endl;




		//..................................XOR the output Function with LEn..............................................


		//Expanding LH to 48-bit for XOR with function Output

		string binLeftHalf = "";
		string sLeftHalf(leftHalf, 8);     //char to string
		hex_to_binary(sLeftHalf, binLeftHalf);

		char *mixer = new char[32];
		mixer[32] = '\0';

		for (int i = 0; i < 32; i++)
		{
			mixer[i] = ((binLeftHalf.at(i) - '0') ^ (sboxPer.at(i) - '0')) + '0';
		}

		/*cout << "\nXor Mixer :";
		for (int i = 0; i < 32; i++)
		{
		cout << mixer[i];
		}
		cout << "\n";*/


		//.........................................................Swapper..............................................................


		swapper(leftHalf, rightHalf, mixer);
		string aa;
		bin_to_hex(perKeyShift[m], aa);
		string slh = hex_str_to_bin_str(leftHalf);
		string srh = hex_str_to_bin_str(rightHalf);
		cout << endl << m + 1 << "\tRightHalf :" << rightHalf << "\t" << aa << endl;
		cout << "\tLeftHalf :" << leftHalf << endl;


	}

}

void des_DecFun(char rightHalf[], char leftHalf[], string perKeyShift[])
{
	for (int m = 0, j = 15; m < 16, j >= 0; m++, j--)
	{


		//................................................Expanding RI−1 to 48 bits...............................................

		//Expansion permutation
		string binRightHalf = "";
		string sRightHalf(rightHalf, 8);     //char to string
		hex_to_binary(sRightHalf, binRightHalf);
		char* expBinRh = new char[48];
		char* unperRightHalf = new char[32];
		expBinRh[48] = '\0';
		unperRightHalf[48] = '\0';

		for (unsigned int i = 0; i <= binRightHalf.length(); i++)
		{
			unperRightHalf[i] = binRightHalf[i];   // string to char array 
		}

		for (int i = 0; i < 48; i++)
		{
			expBinRh[i] = '0';				// char array initialized by all-Zero
		}
		//cout << "ExpBin :" << expBin << endl;
		expantion_Permutation(EpMap, expBinRh, unperRightHalf);
		//cout << endl;
		//cout << "ExpBin :" << expBinRh << endl;    //Expanded binary 48-bit
		//cout << "\n\n";


		//..................................XOR the output E(Rn-1) with the key Kn..............................................


		//	cout << "ExpBinRh :" << expBinRh << endl;    //Expanded binary 48-bit
		string sExpBinRh(expBinRh, 48); //char array to string conversion
		char *xorBin = new char[48];

		for (int i = 0; i < 48; i++)
		{
			xorBin[i] = ((sExpBinRh[i] - '0') ^ (perKeyShift[j].at(i) - '0')) + '0';
		}

		/*string samp;
		bin_to_hex(perKeyShift[15], samp);
		cout << "\nSamp : "<<samp;*/

		/*cout << "\nXor :";
		for (int i = 0; i < 48; i++)
		{
		cout << xorBin[i];
		}
		cout << "\n";
		*/



		//..................................................S-boxes..............................................................

		string blockXor, rowBit, colBit, perSbox;
		int loopIndex_Count = 0, colId, rowId;
		int value, mapVal;

		for (int i = 0; i < 8; i++)
		{
			blockXor.clear();
			for (int j = 0; j < 6; j++)
			{
				blockXor.push_back(xorBin[j + loopIndex_Count]);
			}
			loopIndex_Count += 6;
			rowBit = blockXor.at(0);
			rowBit.push_back(blockXor.at(5));

			value = atoi(rowBit.c_str());
			rowId = bin_to_dec(value);

			colBit = blockXor.substr(1, 4);
			value = atoi(colBit.c_str());
			colId = bin_to_dec(value);

			mapVal = MapSBox(i, rowId, colId);
			bitset<4> bin_x(mapVal);

			stringstream convert;		// stringstream used for the conversion
			convert << bin_x;			//add the value of Number to the characters in the stream

			string sMapVal;
			sMapVal = convert.str();

			for (unsigned int k = 0; k < sMapVal.length(); k++)
				perSbox.push_back(sMapVal.at(k));
		}
		/*cout << "perSbox : " << perSbox << "\n";
		cout << "perSbox : " << perSbox.length() << "\n";

		*/



		//.........................................permutation P of the S - box output..............................................

		int MapPbox[32] = {
			16  , 7 , 20 , 21,
			29  ,12 , 28 , 17,
			1 , 15 , 23 , 26,
			5 , 18 , 31 , 10,
			2 ,  8,  24,  14,
			32,  27,   3 ,  9,
			19 , 13 , 30 ,  6,
			22 , 11 ,  4,  25
		};

		string sboxPer;
		for (int i = 0; i < 32; i++)
		{
			sboxPer.push_back(perSbox.at(MapPbox[i] - 1));
		}
		//cout << "sboxPer : " << sboxPer << endl;



		//..................................XOR the output Function with LEn..............................................


		//Expanding LH to 48-bit for XOR with function Output

		string binLeftHalf = "";
		string sLeftHalf(leftHalf, 8);     //char to string
		hex_to_binary(sLeftHalf, binLeftHalf);

		char *mixer = new char[32];
		mixer[32] = '\0';

		for (int i = 0; i < 32; i++)
		{
			mixer[i] = ((binLeftHalf.at(i) - '0') ^ (sboxPer.at(i) - '0')) + '0';
		}
		/*
		cout << "\nXor Mixer :";
		for (int i = 0; i < 32; i++)
		{
		cout << mixer[i];
		}
		cout << "\n";
		*/





		//.........................................................Swapper..............................................................


		swapper(leftHalf, rightHalf, mixer);
		string aa;
		bin_to_hex(perKeyShift[j], aa);

		string slh = hex_str_to_bin_str(leftHalf);
		string srh = hex_str_to_bin_str(rightHalf);
		cout << endl << m + 1 << "\tRightHalf :" << rightHalf << "\t" << aa << endl;
		cout << "\tLeftHalf :" << leftHalf << endl;

	}
}

void initial_Permutation(string hexText)  //toEncrypt
{


	string /*hexText, */binaryOfHex;
	//	cout << "Hexadecimal : " << hexText << endl;

	binaryOfHex = hex_str_to_bin_str(hexText);


	//Initial Permutation
	//hex_to_binary(hexText, binaryOfHex);
	//cout << "Binary of: " << binaryOfHex << endl;

	unperBinary[64] = '\0';
	perBinary[64] = '\0';

	for (unsigned int i = 0; i <= binaryOfHex.length(); i++)
	{
		unperBinary[i] = binaryOfHex[i];   // string to char array 
	}
	//	cout << "unperBinary :" << unperBinary << endl;
	for (int i = 0; i < 64; i++)
	{
		perBinary[i] = '0';				// char array initialized by all-Zero
	}
	//cout << "Permuter Binary :" << perBinary << endl;
	//cout << endl;
	////perBinary[65] = '\0';				// char array initialized last by Null

	permutaion(IpMap, unperBinary, perBinary);

	cout << endl;

	//perBinary[65] = '\0';
	string sPerBinary(perBinary, 64); //char array to string conversion
									  //cout << "sPerBinary :" << sPerBinary << endl;
	sPerHex.clear();
	bin_to_hex(sPerBinary, sPerHex);
	cout << "After Initial Permutation :" << sPerHex << endl;

}
